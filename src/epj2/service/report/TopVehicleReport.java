package epj2.service.report;

import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

import epj2.model.vehicle.*;
import epj2.util.*;

/**
 * A concrete implementation of the {@link Report} class that generates a top vehicle report.
 * This class identifies the vehicle that has generated the highest revenue for the company 
 * for each vehicle type and serializes those vehicles.
 * It also contains methods for deserializing the vehicles. 
 * 
 * @author Jelena MaletiÄ‡
 * @version 1.9.2024. 
 */
public class TopVehicleReport extends Report {
	/**
	 * Manages the properties file used by the TopVehicleReport class.
	 * This instance is used to load directory path for storing files with serialized vehicles.
	 */
	private PropertiesManager propertiesManagerTVR;
	/**
	 * Path to the directory where files with serialized vehicles are stored.
	 * This path is retrieved from the properties file.
	 */
	private static String reportsDirPath;
	
	/**
     * Constructs a new {@link SummaryReport} instance, initializes the properties manager 
     * (used to load directory path for storing files with serialized vehicles are stored),
     * initializes the reportsDirPath using information from properties file,create the folder where 
     * files with serialized vehicles will be saved and generates the report.
     *
     * @param vehicles a map containing vehicle data, where the key is the vehicle ID and the value is the {@link Vehicle} object.
     * @param invoices a list of {@link InvoiceParser} objects representing the parsed invoice data.
     */
    public TopVehicleReport(Map<String, Vehicle> vehicles, List<InvoiceParser> invoices) {
        super(vehicles, invoices);
        propertiesManagerTVR = new PropertiesManager("filePaths.properties");
        reportsDirPath = propertiesManagerTVR.getProperty("TOP_VEHICLES_DIR");
        createOutputFolder();
        generateReport();
    }
    
    /** Creates the output folder specified by the {@code reportsDirPath} if it does not already exist. */
    private void createOutputFolder() {
    	File folder = new File(reportsDirPath);
    	if (!folder.exists()) {
    		folder.mkdirs();
    	}
    }
    
    /**
     * Generates a report identifying and serializing the vehicle that has
     * generated the highest revenue for each type of vehicle.
     * This method groups vehicles by their type and finds the vehicle with
     * the maximum revenue for each type .
     * It then serializes the top vehicle of each type into a file named according to the vehicle type.
     */
    @Override
    protected void generateReport() {
        Map<Class<? extends Vehicle>, List<Vehicle>> vehiclesByType = vehicles.values().stream().collect(Collectors.groupingBy(Vehicle::getClass));
        for (Map.Entry<Class<? extends Vehicle>, List<Vehicle>> entry : vehiclesByType.entrySet()) {
            Class<? extends Vehicle> type = entry.getKey();
            List<Vehicle> vehicleList = entry.getValue();
            Vehicle topVehicle = vehicleList.stream().max(Comparator.comparingDouble(this::calculateVehicleRevenue)).orElse(null);
            if (topVehicle != null) {
                serializeVehicle(type.getSimpleName(), topVehicle);
            }
        }
    }
    
    /**
    * Calculates the total revenue generated by a specific vehicle.
    * This method sums up the revenue from all invoices where the vehicle's
    * ID matches the vehicle ID provided.
    * 
    * @param vehicle the vehicle for which the revenue is calculated
    * @return the total revenue generated by the specified vehicle
    */
    public double calculateVehicleRevenue(Vehicle vehicle) {
        return invoices.stream().filter(invoice -> invoice.getVehicleID().equals(vehicle.getID())).mapToDouble(InvoiceParser::getTotalAmount).sum();
    }
    
    /**
     * Serializes a vehicle object to a file.
     * This method writes the serialized representation of the specified vehicle
     * to a file named according to the vehicle type, with a suffix "_top_vehicle.ser".
     * The file is created in the directory specified by {@code reportsDirPath}.
     * In case of an I/O error during file writing, the exception is caught and its
     * stack trace is printed to the console. 
     * 
     * @param typeName the name of the vehicle type (used to name the file)
     * @param vehicle the vehicle object to be serialized
     */
    private void serializeVehicle(String typeName, Vehicle vehicle) {
        try {
        	FileOutputStream writer = new FileOutputStream(reportsDirPath + File.separator + typeName + "_top_vehicle.ser");
        	ObjectOutputStream objectWriter = new ObjectOutputStream(writer);
            objectWriter.writeObject(vehicle);
            objectWriter.close();
            writer.close();
        } 
        catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Deserializes a vehicle object from a file.
     * This method reads and reconstructs a vehicle object from a file named
     * according to the specified vehicle type, with a suffix "_top_vehicle.ser".
     * The file is located in the directory specified by {@code reportsDirPath}.
     * The exceptions are caught and their stack trace is printed to the console. 
     * 
     * @param typeName the name of the vehicle type
     * @return the deserialized vehicle object, or {@code null} if an error occurs
     */
    public static Vehicle deserializeVehicle(String typeName) {
    	ObjectInputStream ois = null;
        try {
        	ois = new ObjectInputStream(new FileInputStream(reportsDirPath + File.separator + typeName + "_top_vehicle.ser"));
        	return (Vehicle) ois.readObject();
        } 
        catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
            return null;
        }
        finally {
            try {
                ois.close();
            } 
            catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    /**
     * Deserializes all vehicle objects from serialized files in the specified directory.
     * This method scans the directory specified by {@code reportsDirPath} for files that end with
     * "_top_vehicle.ser". For each file found, it extracts the vehicle type from the file name, 
     * deserializes the vehicle object and maps it to the appropriate vehicle class. 
     * The resulting map associates each vehicle class with its corresponding deserialized vehicle object.
     * 
     * @return a map where keys are vehicle classes and values are the corresponding deserialized vehicle objects
     */
    @SuppressWarnings("unused")
	public static Map<Class<? extends Vehicle>, Vehicle> deserializeAllVehicles() {
        Map<Class<? extends Vehicle>, Vehicle> vehicles = new HashMap<>();
        File folder = new File(reportsDirPath);
        File[] files = folder.listFiles((dir, name) -> name.endsWith("_top_vehicle.ser"));
        if (files != null) {
            for (File file : files) {
                String typeName = file.getName().replace("_top_vehicle.ser", "");
                Class<? extends Vehicle> vehicleClass = getVehicleClassByName(typeName);
                if (vehicleClass != null) {
                    Vehicle vehicle = deserializeVehicle(typeName);
                    if (vehicle != null) {
                        vehicles.put(vehicleClass, vehicle);
                    }
                }
            }
        }
        return vehicles;
    }
    

    /**
     * Returns the vehicle class corresponding to a given type name.
     * 
     * @param typeName the name of the vehicle type ("scooter", "bike", "car")
     * @return the {@link Vehicle} subclass corresponding to the given type name, or {@code null} if no match is found
     */
    private static Class<? extends Vehicle> getVehicleClassByName(String typeName) {
        switch (typeName.toLowerCase()) {
            case "scooter":
                return Scooter.class;
            case "bike":
                return Bike.class;
            case "car":
                return Car.class;
            default:
                return null;
        }
    }
    
}
